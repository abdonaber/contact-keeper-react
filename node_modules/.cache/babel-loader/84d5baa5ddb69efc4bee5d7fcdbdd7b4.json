{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst base_1 = require(\"../base\");\n\nconst context_builder_1 = require(\"../context-builder\");\n\nfunction oneOf(chains, message) {\n  return async (req, _res, next) => {\n    const surrogateContext = new context_builder_1.ContextBuilder().build(); // Run each group of chains in parallel, and within each group, run each chain in parallel too.\n\n    const promises = chains.map(async chain => {\n      const group = Array.isArray(chain) ? chain : [chain];\n      const contexts = await Promise.all(group.map(chain => chain.run(req, {\n        saveContext: false\n      })));\n\n      const groupErrors = _.flatMap(contexts, 'errors'); // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n      // if its entire group is valid.\n\n\n      if (!groupErrors.length) {\n        contexts.forEach(context => {\n          surrogateContext.addFieldInstances(context.getData());\n        });\n      }\n\n      return groupErrors;\n    });\n    req[base_1.contextsKey] = (req[base_1.contextsKey] || []).concat(surrogateContext);\n\n    try {\n      const allErrors = await Promise.all(promises);\n      const success = allErrors.some(groupErrors => groupErrors.length === 0);\n\n      if (!success) {\n        // Only add an error to the context if no group of chains had success.\n        surrogateContext.addError(typeof message === 'function' ? message({\n          req\n        }) : message || 'Invalid value(s)', _.flatMap(allErrors));\n      }\n\n      next();\n    } catch (e) {\n      next(e);\n    }\n  };\n}\n\nexports.oneOf = oneOf;","map":{"version":3,"sources":["/Users/abdalla/Desktop/contact-keeper/node_modules/express-validator/src/middlewares/one-of.js"],"names":["Object","defineProperty","exports","value","_","require","base_1","context_builder_1","oneOf","chains","message","req","_res","next","surrogateContext","ContextBuilder","build","promises","map","chain","group","Array","isArray","contexts","Promise","all","run","saveContext","groupErrors","flatMap","length","forEach","context","addFieldInstances","getData","contextsKey","concat","allErrors","success","some","addError","e"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,oBAAD,CAAjC;;AACA,SAASG,KAAT,CAAeC,MAAf,EAAuBC,OAAvB,EAAgC;AAC5B,SAAO,OAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB,KAA2B;AAC9B,UAAMC,gBAAgB,GAAG,IAAIP,iBAAiB,CAACQ,cAAtB,GAAuCC,KAAvC,EAAzB,CAD8B,CAE9B;;AACA,UAAMC,QAAQ,GAAGR,MAAM,CAACS,GAAP,CAAW,MAAOC,KAAP,IAAiB;AACzC,YAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA7C;AACA,YAAMI,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACF,GAAN,CAAUC,KAAK,IAAIA,KAAK,CAACO,GAAN,CAAUf,GAAV,EAAe;AAAEgB,QAAAA,WAAW,EAAE;AAAf,OAAf,CAAnB,CAAZ,CAAvB;;AACA,YAAMC,WAAW,GAAGxB,CAAC,CAACyB,OAAF,CAAUN,QAAV,EAAoB,QAApB,CAApB,CAHyC,CAIzC;AACA;;;AACA,UAAI,CAACK,WAAW,CAACE,MAAjB,EAAyB;AACrBP,QAAAA,QAAQ,CAACQ,OAAT,CAAiBC,OAAO,IAAI;AACxBlB,UAAAA,gBAAgB,CAACmB,iBAAjB,CAAmCD,OAAO,CAACE,OAAR,EAAnC;AACH,SAFD;AAGH;;AACD,aAAON,WAAP;AACH,KAZgB,CAAjB;AAaAjB,IAAAA,GAAG,CAACL,MAAM,CAAC6B,WAAR,CAAH,GAA0B,CAACxB,GAAG,CAACL,MAAM,CAAC6B,WAAR,CAAH,IAA2B,EAA5B,EAAgCC,MAAhC,CAAuCtB,gBAAvC,CAA1B;;AACA,QAAI;AACA,YAAMuB,SAAS,GAAG,MAAMb,OAAO,CAACC,GAAR,CAAYR,QAAZ,CAAxB;AACA,YAAMqB,OAAO,GAAGD,SAAS,CAACE,IAAV,CAAeX,WAAW,IAAIA,WAAW,CAACE,MAAZ,KAAuB,CAArD,CAAhB;;AACA,UAAI,CAACQ,OAAL,EAAc;AACV;AACAxB,QAAAA,gBAAgB,CAAC0B,QAAjB,CAA0B,OAAO9B,OAAP,KAAmB,UAAnB,GAAgCA,OAAO,CAAC;AAAEC,UAAAA;AAAF,SAAD,CAAvC,GAAmDD,OAAO,IAAI,kBAAxF,EAA4GN,CAAC,CAACyB,OAAF,CAAUQ,SAAV,CAA5G;AACH;;AACDxB,MAAAA,IAAI;AACP,KARD,CASA,OAAO4B,CAAP,EAAU;AACN5B,MAAAA,IAAI,CAAC4B,CAAD,CAAJ;AACH;AACJ,GA7BD;AA8BH;;AACDvC,OAAO,CAACM,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst base_1 = require(\"../base\");\nconst context_builder_1 = require(\"../context-builder\");\nfunction oneOf(chains, message) {\n    return async (req, _res, next) => {\n        const surrogateContext = new context_builder_1.ContextBuilder().build();\n        // Run each group of chains in parallel, and within each group, run each chain in parallel too.\n        const promises = chains.map(async (chain) => {\n            const group = Array.isArray(chain) ? chain : [chain];\n            const contexts = await Promise.all(group.map(chain => chain.run(req, { saveContext: false })));\n            const groupErrors = _.flatMap(contexts, 'errors');\n            // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n            // if its entire group is valid.\n            if (!groupErrors.length) {\n                contexts.forEach(context => {\n                    surrogateContext.addFieldInstances(context.getData());\n                });\n            }\n            return groupErrors;\n        });\n        req[base_1.contextsKey] = (req[base_1.contextsKey] || []).concat(surrogateContext);\n        try {\n            const allErrors = await Promise.all(promises);\n            const success = allErrors.some(groupErrors => groupErrors.length === 0);\n            if (!success) {\n                // Only add an error to the context if no group of chains had success.\n                surrogateContext.addError(typeof message === 'function' ? message({ req }) : message || 'Invalid value(s)', _.flatMap(allErrors));\n            }\n            next();\n        }\n        catch (e) {\n            next(e);\n        }\n    };\n}\nexports.oneOf = oneOf;\n"]},"metadata":{},"sourceType":"script"}