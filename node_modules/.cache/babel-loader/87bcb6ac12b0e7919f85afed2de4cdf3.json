{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst select_fields_1 = require(\"../select-fields\");\n\nconst base_1 = require(\"../base\");\n\nclass ContextRunnerImpl {\n  constructor(builder, selectFields = select_fields_1.selectFields) {\n    this.builder = builder;\n    this.selectFields = selectFields;\n  }\n\n  async run(req, options = {}) {\n    const context = this.builder.build();\n    const instances = this.selectFields(req, context.fields, context.locations);\n    context.addFieldInstances(instances);\n    const haltedInstances = new Set();\n\n    for (const contextItem of context.stack) {\n      const promises = context.getData({\n        requiredOnly: true\n      }).map(async instance => {\n        const instanceKey = `${instance.location}:${instance.path}`;\n\n        if (haltedInstances.has(instanceKey)) {\n          return;\n        }\n\n        try {\n          await contextItem.run(context, instance.value, {\n            req,\n            location: instance.location,\n            path: instance.path\n          });\n        } catch (e) {\n          if (e instanceof base_1.ValidationHalt) {\n            haltedInstances.add(instanceKey);\n            return;\n          }\n\n          throw e;\n        }\n      });\n      await Promise.all(promises);\n    }\n\n    if (options.saveContext === undefined || options.saveContext) {\n      const internalReq = req;\n      internalReq[base_1.contextsKey] = (internalReq[base_1.contextsKey] || []).concat(context);\n    }\n\n    return context;\n  }\n\n}\n\nexports.ContextRunnerImpl = ContextRunnerImpl;","map":{"version":3,"sources":["/Users/abdalla/Desktop/contact-keeper/node_modules/express-validator/src/chain/context-runner-impl.js"],"names":["Object","defineProperty","exports","value","select_fields_1","require","base_1","ContextRunnerImpl","constructor","builder","selectFields","run","req","options","context","build","instances","fields","locations","addFieldInstances","haltedInstances","Set","contextItem","stack","promises","getData","requiredOnly","map","instance","instanceKey","location","path","has","e","ValidationHalt","add","Promise","all","saveContext","undefined","internalReq","contextsKey","concat"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,eAAe,GAAGC,OAAO,CAAC,kBAAD,CAA/B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAME,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,OAAD,EAAUC,YAAY,GAAGN,eAAe,CAACM,YAAzC,EAAuD;AAC9D,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACH;;AACD,QAAMC,GAAN,CAAUC,GAAV,EAAeC,OAAO,GAAG,EAAzB,EAA6B;AACzB,UAAMC,OAAO,GAAG,KAAKL,OAAL,CAAaM,KAAb,EAAhB;AACA,UAAMC,SAAS,GAAG,KAAKN,YAAL,CAAkBE,GAAlB,EAAuBE,OAAO,CAACG,MAA/B,EAAuCH,OAAO,CAACI,SAA/C,CAAlB;AACAJ,IAAAA,OAAO,CAACK,iBAAR,CAA0BH,SAA1B;AACA,UAAMI,eAAe,GAAG,IAAIC,GAAJ,EAAxB;;AACA,SAAK,MAAMC,WAAX,IAA0BR,OAAO,CAACS,KAAlC,EAAyC;AACrC,YAAMC,QAAQ,GAAGV,OAAO,CAACW,OAAR,CAAgB;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OAAhB,EAAwCC,GAAxC,CAA4C,MAAOC,QAAP,IAAoB;AAC7E,cAAMC,WAAW,GAAI,GAAED,QAAQ,CAACE,QAAS,IAAGF,QAAQ,CAACG,IAAK,EAA1D;;AACA,YAAIX,eAAe,CAACY,GAAhB,CAAoBH,WAApB,CAAJ,EAAsC;AAClC;AACH;;AACD,YAAI;AACA,gBAAMP,WAAW,CAACX,GAAZ,CAAgBG,OAAhB,EAAyBc,QAAQ,CAACzB,KAAlC,EAAyC;AAC3CS,YAAAA,GAD2C;AAE3CkB,YAAAA,QAAQ,EAAEF,QAAQ,CAACE,QAFwB;AAG3CC,YAAAA,IAAI,EAAEH,QAAQ,CAACG;AAH4B,WAAzC,CAAN;AAKH,SAND,CAOA,OAAOE,CAAP,EAAU;AACN,cAAIA,CAAC,YAAY3B,MAAM,CAAC4B,cAAxB,EAAwC;AACpCd,YAAAA,eAAe,CAACe,GAAhB,CAAoBN,WAApB;AACA;AACH;;AACD,gBAAMI,CAAN;AACH;AACJ,OAnBgB,CAAjB;AAoBA,YAAMG,OAAO,CAACC,GAAR,CAAYb,QAAZ,CAAN;AACH;;AACD,QAAIX,OAAO,CAACyB,WAAR,KAAwBC,SAAxB,IAAqC1B,OAAO,CAACyB,WAAjD,EAA8D;AAC1D,YAAME,WAAW,GAAG5B,GAApB;AACA4B,MAAAA,WAAW,CAAClC,MAAM,CAACmC,WAAR,CAAX,GAAkC,CAACD,WAAW,CAAClC,MAAM,CAACmC,WAAR,CAAX,IAAmC,EAApC,EAAwCC,MAAxC,CAA+C5B,OAA/C,CAAlC;AACH;;AACD,WAAOA,OAAP;AACH;;AAtCmB;;AAwCxBZ,OAAO,CAACK,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst select_fields_1 = require(\"../select-fields\");\nconst base_1 = require(\"../base\");\nclass ContextRunnerImpl {\n    constructor(builder, selectFields = select_fields_1.selectFields) {\n        this.builder = builder;\n        this.selectFields = selectFields;\n    }\n    async run(req, options = {}) {\n        const context = this.builder.build();\n        const instances = this.selectFields(req, context.fields, context.locations);\n        context.addFieldInstances(instances);\n        const haltedInstances = new Set();\n        for (const contextItem of context.stack) {\n            const promises = context.getData({ requiredOnly: true }).map(async (instance) => {\n                const instanceKey = `${instance.location}:${instance.path}`;\n                if (haltedInstances.has(instanceKey)) {\n                    return;\n                }\n                try {\n                    await contextItem.run(context, instance.value, {\n                        req,\n                        location: instance.location,\n                        path: instance.path,\n                    });\n                }\n                catch (e) {\n                    if (e instanceof base_1.ValidationHalt) {\n                        haltedInstances.add(instanceKey);\n                        return;\n                    }\n                    throw e;\n                }\n            });\n            await Promise.all(promises);\n        }\n        if (options.saveContext === undefined || options.saveContext) {\n            const internalReq = req;\n            internalReq[base_1.contextsKey] = (internalReq[base_1.contextsKey] || []).concat(context);\n        }\n        return context;\n    }\n}\nexports.ContextRunnerImpl = ContextRunnerImpl;\n"]},"metadata":{},"sourceType":"script"}