{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst utils_1 = require(\"../utils\");\n\nclass Sanitization {\n  constructor(sanitizer, custom, options = []) {\n    this.sanitizer = sanitizer;\n    this.custom = custom;\n    this.options = options;\n  }\n\n  async run(context, value, meta) {\n    const {\n      req,\n      path,\n      location\n    } = meta;\n    const newValue = this.custom ? this.sanitizer(value, meta) : this.sanitizer(utils_1.toString(value), ...this.options);\n    context.setData(path, newValue, location); // Checks whether the value changed.\n    // Avoids e.g. undefined values being set on the request if it didn't have the key initially.\n\n    const reqValue = path !== '' ? _.get(req[location], path) : req[location];\n\n    if (reqValue !== newValue) {\n      path !== '' ? _.set(req[location], path, newValue) : _.set(req, location, newValue);\n    }\n  }\n\n}\n\nexports.Sanitization = Sanitization;","map":{"version":3,"sources":["/Users/abdalla/Desktop/contact-keeper/node_modules/express-validator/src/context-items/sanitization.js"],"names":["Object","defineProperty","exports","value","_","require","utils_1","Sanitization","constructor","sanitizer","custom","options","run","context","meta","req","path","location","newValue","toString","setData","reqValue","get","set"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,YAAN,CAAmB;AACfC,EAAAA,WAAW,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,OAAO,GAAG,EAA9B,EAAkC;AACzC,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;AACD,QAAMC,GAAN,CAAUC,OAAV,EAAmBV,KAAnB,EAA0BW,IAA1B,EAAgC;AAC5B,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,IAAP;AAAaC,MAAAA;AAAb,QAA0BH,IAAhC;AACA,UAAMI,QAAQ,GAAG,KAAKR,MAAL,GACX,KAAKD,SAAL,CAAeN,KAAf,EAAsBW,IAAtB,CADW,GAEX,KAAKL,SAAL,CAAeH,OAAO,CAACa,QAAR,CAAiBhB,KAAjB,CAAf,EAAwC,GAAG,KAAKQ,OAAhD,CAFN;AAGAE,IAAAA,OAAO,CAACO,OAAR,CAAgBJ,IAAhB,EAAsBE,QAAtB,EAAgCD,QAAhC,EAL4B,CAM5B;AACA;;AACA,UAAMI,QAAQ,GAAGL,IAAI,KAAK,EAAT,GAAcZ,CAAC,CAACkB,GAAF,CAAMP,GAAG,CAACE,QAAD,CAAT,EAAqBD,IAArB,CAAd,GAA2CD,GAAG,CAACE,QAAD,CAA/D;;AACA,QAAII,QAAQ,KAAKH,QAAjB,EAA2B;AACvBF,MAAAA,IAAI,KAAK,EAAT,GAAcZ,CAAC,CAACmB,GAAF,CAAMR,GAAG,CAACE,QAAD,CAAT,EAAqBD,IAArB,EAA2BE,QAA3B,CAAd,GAAqDd,CAAC,CAACmB,GAAF,CAAMR,GAAN,EAAWE,QAAX,EAAqBC,QAArB,CAArD;AACH;AACJ;;AAlBc;;AAoBnBhB,OAAO,CAACK,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst utils_1 = require(\"../utils\");\nclass Sanitization {\n    constructor(sanitizer, custom, options = []) {\n        this.sanitizer = sanitizer;\n        this.custom = custom;\n        this.options = options;\n    }\n    async run(context, value, meta) {\n        const { req, path, location } = meta;\n        const newValue = this.custom\n            ? this.sanitizer(value, meta)\n            : this.sanitizer(utils_1.toString(value), ...this.options);\n        context.setData(path, newValue, location);\n        // Checks whether the value changed.\n        // Avoids e.g. undefined values being set on the request if it didn't have the key initially.\n        const reqValue = path !== '' ? _.get(req[location], path) : req[location];\n        if (reqValue !== newValue) {\n            path !== '' ? _.set(req[location], path, newValue) : _.set(req, location, newValue);\n        }\n    }\n}\nexports.Sanitization = Sanitization;\n"]},"metadata":{},"sourceType":"script"}