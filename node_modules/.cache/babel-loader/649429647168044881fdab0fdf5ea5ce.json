{"ast":null,"code":"var _jsxFileName = \"/Users/abdalla/Desktop/contact-keeper/client/src/context/contact/ContactState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ContactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from '../types';\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(contactReducer, initialState); // Get Contacts\n\n  const getContacts = async () => {\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  }; // Add Contact\n\n\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  }; // Delete Contact\n\n\n  const deleteContact = id => {\n    dispatch({\n      type: DELETE_CONTACT,\n      payload: id\n    });\n  }; // Set Current Contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; // Clear Current Contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // Update Contact\n\n\n  const updateContact = contact => {\n    dispatch({\n      type: UPDATE_CONTACT,\n      payload: contact\n    });\n  }; // Filter Contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; // Cleart filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return React.createElement(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      addContact,\n      deleteContact,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["/Users/abdalla/Desktop/contact-keeper/client/src/context/contact/ContactState.js"],"names":["React","useReducer","axios","ContactContext","contactReducer","GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","res","post","contact","config","type","payload","data","err","response","msg","addContact","headers","deleteContact","id","setCurrent","clearCurrent","updateContact","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ContactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR\n} from '../types';\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  };\n\n  const [state, dispatch] = useReducer(contactReducer, initialState);\n\n  // Get Contacts\n  const getContacts = async () => {\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  };\n\n  // Add Contact\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  };\n\n  // Delete Contact\n  const deleteContact = id => {\n    dispatch({ type: DELETE_CONTACT, payload: id });\n  };\n\n  // Set Current Contact\n  const setCurrent = contact => {\n    dispatch({ type: SET_CURRENT, payload: contact });\n  };\n\n  // Clear Current Contact\n  const clearCurrent = () => {\n    dispatch({ type: CLEAR_CURRENT });\n  };\n\n  // Update Contact\n  const updateContact = contact => {\n    dispatch({ type: UPDATE_CONTACT, payload: contact });\n  };\n\n  // Filter Contacts\n  const filterContacts = text => {\n    dispatch({ type: FILTER_CONTACTS, payload: text });\n  };\n\n  // Cleart filter\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER });\n  };\n\n  return (\n    <ContactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        error: state.error,\n        addContact,\n        deleteContact,\n        setCurrent,\n        clearCurrent,\n        updateContact,\n        filterContacts,\n        clearFilter\n      }}\n    >\n      {props.children}\n    </ContactContext.Provider>\n  );\n};\n\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}